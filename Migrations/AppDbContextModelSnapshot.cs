// <auto-generated />
using System;
using LogHubStart.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LogHubStart.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogHubStart.Models.Aisle", b =>
                {
                    b.Property<int>("AisleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AisleId"));

                    b.Property<string>("AisleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("StraightLineId")
                        .HasColumnType("integer");

                    b.HasKey("AisleId");

                    b.HasIndex("StraightLineId");

                    b.ToTable("Aisle");
                });

            modelBuilder.Entity("LogHubStart.Models.AisleSection", b =>
                {
                    b.Property<int>("AisleSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AisleSectionId"));

                    b.Property<int>("AisleId")
                        .HasColumnType("integer");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("AisleSectionId");

                    b.HasIndex("AisleId");

                    b.ToTable("AisleSection");
                });

            modelBuilder.Entity("LogHubStart.Models.AisleSectionPosition", b =>
                {
                    b.Property<int>("AisleSectionPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AisleSectionPositionId"));

                    b.Property<int>("AisleSectionId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<double>("PositionCapacity")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("AisleSectionPositionId");

                    b.HasIndex("AisleSectionId");

                    b.ToTable("AisleSectionPosition");
                });

            modelBuilder.Entity("LogHubStart.Models.Bin", b =>
                {
                    b.Property<int>("BinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BinId"));

                    b.Property<double>("BinCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("BinStorageId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("BinId");

                    b.HasIndex("BinStorageId");

                    b.ToTable("Bin");
                });

            modelBuilder.Entity("LogHubStart.Models.BinStorage", b =>
                {
                    b.Property<int>("BinStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BinStorageId"));

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("WarehouseSectionsId")
                        .HasColumnType("integer");

                    b.HasKey("BinStorageId");

                    b.HasIndex("WarehouseSectionsId");

                    b.ToTable("BinStorage");
                });

            modelBuilder.Entity("LogHubStart.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("LogHubStart.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("LogHubStart.Models.InventoryMovement", b =>
                {
                    b.Property<int>("InventoryMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryMovementId"));

                    b.Property<int>("FromProductLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("MovementByEmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ToProductLocationId")
                        .HasColumnType("integer");

                    b.HasKey("InventoryMovementId");

                    b.HasIndex("FromProductLocationId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MovementByEmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToProductLocationId");

                    b.ToTable("InventoryMovement");
                });

            modelBuilder.Entity("LogHubStart.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("LogHubStart.Models.Island", b =>
                {
                    b.Property<int>("IslandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IslandId"));

                    b.Property<int>("WarehouseSectionsId")
                        .HasColumnType("integer");

                    b.HasKey("IslandId");

                    b.HasIndex("WarehouseSectionsId");

                    b.ToTable("Island");
                });

            modelBuilder.Entity("LogHubStart.Models.IslandPosition", b =>
                {
                    b.Property<int>("IslandPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IslandPositionId"));

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("IslandCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("IslandId")
                        .HasColumnType("integer");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("IslandPositionId");

                    b.HasIndex("IslandId");

                    b.ToTable("IslandPosition");
                });

            modelBuilder.Entity("LogHubStart.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<int>("ItemLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemLocationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ItemStock");
                });

            modelBuilder.Entity("LogHubStart.Models.ItemLocation", b =>
                {
                    b.Property<int>("ItemLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemLocationId"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("IslandPositionId")
                        .HasColumnType("integer");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("ItemLocationId");

                    b.HasIndex("BinId");

                    b.HasIndex("IslandPositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("ProductLocation");
                });

            modelBuilder.Entity("LogHubStart.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("Order");
                });

            modelBuilder.Entity("LogHubStart.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("LogHubStart.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("LogHubStart.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("ProductCategorie");
                });

            modelBuilder.Entity("LogHubStart.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("AdminAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManagerAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("WorkerAccess")
                        .HasColumnType("boolean");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("LogHubStart.Models.StraightLine", b =>
                {
                    b.Property<int>("StraightLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StraightLineID"));

                    b.Property<int>("WarehouseSectionId")
                        .HasColumnType("integer");

                    b.HasKey("StraightLineID");

                    b.HasIndex("WarehouseSectionId");

                    b.ToTable("StraightLine");
                });

            modelBuilder.Entity("LogHubStart.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("LogHubStart.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("integer");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("LogHubStart.Models.WarehouseSection", b =>
                {
                    b.Property<int>("WarehouseSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WarehouseSectionId"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("WarehouseSectionId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseSection");
                });

            modelBuilder.Entity("LogHubStart.Models.Aisle", b =>
                {
                    b.HasOne("LogHubStart.Models.StraightLine", "StraightLine")
                        .WithMany("Aisles")
                        .HasForeignKey("StraightLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StraightLine");
                });

            modelBuilder.Entity("LogHubStart.Models.AisleSection", b =>
                {
                    b.HasOne("LogHubStart.Models.Aisle", "Aisle")
                        .WithMany("AisleSections")
                        .HasForeignKey("AisleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aisle");
                });

            modelBuilder.Entity("LogHubStart.Models.AisleSectionPosition", b =>
                {
                    b.HasOne("LogHubStart.Models.AisleSection", "AisleSection")
                        .WithMany("AisleSectionPositions")
                        .HasForeignKey("AisleSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AisleSection");
                });

            modelBuilder.Entity("LogHubStart.Models.Bin", b =>
                {
                    b.HasOne("LogHubStart.Models.BinStorage", "BinStorage")
                        .WithMany("Bins")
                        .HasForeignKey("BinStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinStorage");
                });

            modelBuilder.Entity("LogHubStart.Models.BinStorage", b =>
                {
                    b.HasOne("LogHubStart.Models.WarehouseSection", "WarehouseSection")
                        .WithMany("BinStorages")
                        .HasForeignKey("WarehouseSectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WarehouseSection");
                });

            modelBuilder.Entity("LogHubStart.Models.Employee", b =>
                {
                    b.HasOne("LogHubStart.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LogHubStart.Models.InventoryMovement", b =>
                {
                    b.HasOne("LogHubStart.Models.ItemLocation", "FromItemLocation")
                        .WithMany()
                        .HasForeignKey("FromProductLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogHubStart.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogHubStart.Models.Employee", "MovementByEmployee")
                        .WithMany()
                        .HasForeignKey("MovementByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogHubStart.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LogHubStart.Models.ItemLocation", "ToItemLocation")
                        .WithMany()
                        .HasForeignKey("ToProductLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromItemLocation");

                    b.Navigation("Item");

                    b.Navigation("MovementByEmployee");

                    b.Navigation("Order");

                    b.Navigation("ToItemLocation");
                });

            modelBuilder.Entity("LogHubStart.Models.Invoice", b =>
                {
                    b.HasOne("LogHubStart.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("LogHubStart.Models.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LogHubStart.Models.Island", b =>
                {
                    b.HasOne("LogHubStart.Models.WarehouseSection", "WarehouseSection")
                        .WithMany("Islands")
                        .HasForeignKey("WarehouseSectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WarehouseSection");
                });

            modelBuilder.Entity("LogHubStart.Models.IslandPosition", b =>
                {
                    b.HasOne("LogHubStart.Models.Island", "Island")
                        .WithMany("IslandPositions")
                        .HasForeignKey("IslandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Island");
                });

            modelBuilder.Entity("LogHubStart.Models.Item", b =>
                {
                    b.HasOne("LogHubStart.Models.ItemLocation", "ItemLocation")
                        .WithMany("Items")
                        .HasForeignKey("ItemLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogHubStart.Models.Order", null)
                        .WithMany("FulfilledItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("LogHubStart.Models.Product", "Product")
                        .WithMany("ItemStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemLocation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LogHubStart.Models.ItemLocation", b =>
                {
                    b.HasOne("LogHubStart.Models.Bin", "Bin")
                        .WithMany()
                        .HasForeignKey("BinId");

                    b.HasOne("LogHubStart.Models.IslandPosition", "IslandPosition")
                        .WithMany()
                        .HasForeignKey("IslandPositionId");

                    b.HasOne("LogHubStart.Models.AisleSectionPosition", "AisleSectionPosition")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("AisleSectionPosition");

                    b.Navigation("Bin");

                    b.Navigation("IslandPosition");
                });

            modelBuilder.Entity("LogHubStart.Models.Order", b =>
                {
                    b.HasOne("LogHubStart.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogHubStart.Models.Invoice", "Invoice")
                        .WithOne("Orders")
                        .HasForeignKey("LogHubStart.Models.Order", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("LogHubStart.Models.OrderProduct", b =>
                {
                    b.HasOne("LogHubStart.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogHubStart.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LogHubStart.Models.Product", b =>
                {
                    b.HasOne("LogHubStart.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("LogHubStart.Models.StraightLine", b =>
                {
                    b.HasOne("LogHubStart.Models.WarehouseSection", "WarehouseSection")
                        .WithMany("StraightLines")
                        .HasForeignKey("WarehouseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WarehouseSection");
                });

            modelBuilder.Entity("LogHubStart.Models.WarehouseSection", b =>
                {
                    b.HasOne("LogHubStart.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseSections")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("LogHubStart.Models.Aisle", b =>
                {
                    b.Navigation("AisleSections");
                });

            modelBuilder.Entity("LogHubStart.Models.AisleSection", b =>
                {
                    b.Navigation("AisleSectionPositions");
                });

            modelBuilder.Entity("LogHubStart.Models.BinStorage", b =>
                {
                    b.Navigation("Bins");
                });

            modelBuilder.Entity("LogHubStart.Models.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LogHubStart.Models.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LogHubStart.Models.Invoice", b =>
                {
                    b.Navigation("Orders")
                        .IsRequired();
                });

            modelBuilder.Entity("LogHubStart.Models.Island", b =>
                {
                    b.Navigation("IslandPositions");
                });

            modelBuilder.Entity("LogHubStart.Models.ItemLocation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LogHubStart.Models.Order", b =>
                {
                    b.Navigation("FulfilledItems");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("LogHubStart.Models.Product", b =>
                {
                    b.Navigation("ItemStocks");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("LogHubStart.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LogHubStart.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("LogHubStart.Models.StraightLine", b =>
                {
                    b.Navigation("Aisles");
                });

            modelBuilder.Entity("LogHubStart.Models.Supplier", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LogHubStart.Models.Warehouse", b =>
                {
                    b.Navigation("WarehouseSections");
                });

            modelBuilder.Entity("LogHubStart.Models.WarehouseSection", b =>
                {
                    b.Navigation("BinStorages");

                    b.Navigation("Islands");

                    b.Navigation("StraightLines");
                });
#pragma warning restore 612, 618
        }
    }
}
